package com.abhiram.javassist.remover.impl.malware;

import com.abhiram.javassist.model.PluginFile;
import com.abhiram.javassist.remover.IRemover;
import com.abhiram.javassist.util.JarUtil;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.ClassNode;

import java.io.File;
import java.util.logging.Logger;

import static org.objectweb.asm.Opcodes.*;

public class HostFlowRemover implements IRemover {
    private final Logger logger = Logger.getLogger("HostFlowRemover");

    @Override
    public void check(PluginFile plugin) {
        boolean isinfected = false;

        for(ClassNode node1 : plugin.getNodes()){
            if(node1.name.contains("L10")){
                isinfected = true;
            }
        }

        if(isinfected){
            logger.info("Java Assist Malware detected on " + plugin.getPlugin().getName());
            logger.info("Removing Malware......");
            this.remove(plugin);
        }else {
            logger.info("Java Assist Malware not found on " + plugin.getPlugin().getName());
        }
    }

    @Override
    public void remove(PluginFile plugin) {
        for(ClassNode node : plugin.getNodes()){
            if(node.name.contains("L10")) {
                logger.info("Removed backdoor from " + node.name);
                node.fields.clear();
                node.methods.clear();

                MethodVisitor constructor = node.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
                constructor.visitCode();
                constructor.visitVarInsn(ALOAD, 0);
                constructor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
                constructor.visitInsn(RETURN);
                constructor.visitMaxs(1,1);
                constructor.visitEnd();

                MethodVisitor malware_method = node.visitMethod(ACC_PUBLIC,"a","(Ljava/lang/String;)V",null,null);
                malware_method.visitCode();
                malware_method.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
                malware_method.visitLdcInsn("Hahahah nice try to backdoor");
                malware_method.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
                malware_method.visitInsn(Opcodes.RETURN);
                malware_method.visitMaxs(0, 0);
                malware_method.visitEnd();
            }
        }

        JarUtil.save(new File("result/" + plugin.getPlugin().getName() + "-removed.jar"),plugin,true);
    }
}
